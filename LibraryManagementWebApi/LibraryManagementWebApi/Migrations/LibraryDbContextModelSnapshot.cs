// <auto-generated />
using System;
using LibraryManagementWebApi.Model.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LibraryManagementWebApi.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    partial class LibraryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("LibraryManagementWebApi.Model.Entity.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorName = "amir"
                        },
                        new
                        {
                            Id = 2,
                            AuthorName = "ali"
                        },
                        new
                        {
                            Id = 3,
                            AuthorName = "reza"
                        });
                });

            modelBuilder.Entity("LibraryManagementWebApi.Model.Entity.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            BookName = "python",
                            Genre = "educational"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            BookName = "Node",
                            Genre = "educational"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            BookName = "C#",
                            Genre = "educational"
                        });
                });

            modelBuilder.Entity("LibraryManagementWebApi.Model.Entity.BookInPublisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("PublisherId");

                    b.ToTable("BookInPublishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            PublisherId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            PublisherId = 2
                        },
                        new
                        {
                            Id = 3,
                            BookId = 3,
                            PublisherId = 3
                        });
                });

            modelBuilder.Entity("LibraryManagementWebApi.Model.Entity.Borrow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Borrows");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserName = "aa"
                        },
                        new
                        {
                            Id = 2,
                            UserName = "bb"
                        },
                        new
                        {
                            Id = 3,
                            UserName = "cc"
                        });
                });

            modelBuilder.Entity("LibraryManagementWebApi.Model.Entity.BorrowingHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("BorrowId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("BorrowId");

                    b.ToTable("BorrowingHistorys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 2,
                            BorrowId = 1,
                            DeliveryDate = new DateTime(2023, 8, 22, 17, 0, 17, 628, DateTimeKind.Local).AddTicks(3108),
                            ReturnDate = new DateTime(2023, 8, 22, 17, 0, 17, 648, DateTimeKind.Local).AddTicks(3851)
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            BorrowId = 3,
                            DeliveryDate = new DateTime(2023, 8, 22, 17, 0, 17, 648, DateTimeKind.Local).AddTicks(5028),
                            ReturnDate = new DateTime(2023, 8, 22, 17, 0, 17, 648, DateTimeKind.Local).AddTicks(5046)
                        },
                        new
                        {
                            Id = 3,
                            BookId = 3,
                            BorrowId = 1,
                            DeliveryDate = new DateTime(2023, 8, 22, 17, 0, 17, 648, DateTimeKind.Local).AddTicks(5051),
                            ReturnDate = new DateTime(2023, 8, 22, 17, 0, 17, 648, DateTimeKind.Local).AddTicks(5054)
                        });
                });

            modelBuilder.Entity("LibraryManagementWebApi.Model.Entity.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("PublisherName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PublisherName = "gaj"
                        },
                        new
                        {
                            Id = 2,
                            PublisherName = "sharif"
                        },
                        new
                        {
                            Id = 3,
                            PublisherName = "harfeaghar"
                        });
                });

            modelBuilder.Entity("LibraryManagementWebApi.Model.Entity.Book", b =>
                {
                    b.HasOne("LibraryManagementWebApi.Model.Entity.Author", "authors")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("authors");
                });

            modelBuilder.Entity("LibraryManagementWebApi.Model.Entity.BookInPublisher", b =>
                {
                    b.HasOne("LibraryManagementWebApi.Model.Entity.Book", "Books")
                        .WithMany("bookinpublisher")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementWebApi.Model.Entity.Publisher", "Publishers")
                        .WithMany("bookinpublisher")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Books");

                    b.Navigation("Publishers");
                });

            modelBuilder.Entity("LibraryManagementWebApi.Model.Entity.BorrowingHistory", b =>
                {
                    b.HasOne("LibraryManagementWebApi.Model.Entity.Book", "Books")
                        .WithMany("borrowinghistory")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagementWebApi.Model.Entity.Borrow", "Borrows")
                        .WithMany("borrowinghistory")
                        .HasForeignKey("BorrowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Books");

                    b.Navigation("Borrows");
                });

            modelBuilder.Entity("LibraryManagementWebApi.Model.Entity.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryManagementWebApi.Model.Entity.Book", b =>
                {
                    b.Navigation("bookinpublisher");

                    b.Navigation("borrowinghistory");
                });

            modelBuilder.Entity("LibraryManagementWebApi.Model.Entity.Borrow", b =>
                {
                    b.Navigation("borrowinghistory");
                });

            modelBuilder.Entity("LibraryManagementWebApi.Model.Entity.Publisher", b =>
                {
                    b.Navigation("bookinpublisher");
                });
#pragma warning restore 612, 618
        }
    }
}
